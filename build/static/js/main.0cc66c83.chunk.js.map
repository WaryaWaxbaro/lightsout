{"version":3,"sources":["Cell.js","Helper.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","classes","this","props","isLit","cellId","pos","x","y","className","id","onClick","ev","Component","isRange","val","toggleCurrentCell","b","cu","ne","i","length","j","createBoard","board","arr","Math","floor","random","push","toggleValue","Board","click","bind","restart","state","hasWon","nrows","ncols","coord","currentValue","newBoardVal","newValue","toggleNeigbours","win","flat","every","w","setState","evt","targetId","target","split","map","Number","flipCellsAround","c","newBoard","key","cellContent","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cc66c83.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\nclass Cell extends Component {\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n    let cellId = `${this.props.pos.x}${this.props.pos.y}`;\n\n    return (\n        <td className={classes} id={cellId} onClick={this.props.ev}></td>\n    )\n  }\n}\n\n\nexport default Cell","export const isRange = val => val >= 0 && val < 5;\r\nexport const toggleCurrentCell = (y, x, b, cu, ne) => {\r\n    for(let i = 0; i < b.length; i++){\r\n      for(let j = 0; j < b[i].length; j++){\r\n        if(b[y][x] === cu){\r\n          b[y][x] = ne;\r\n        }\r\n      }\r\n    }\r\n    return b;\r\n  }\r\nexport const createBoard = (y, x) => {\r\n    let board = [];\r\n    for(let i = 0; i < y; i++){\r\n      let arr = [];\r\n      for(let j = 0; j < x; j++){\r\n        let ran = Math.floor(Math.random() * 2);\r\n        ran === 0 ? arr.push(\".\") : arr.push(\"O\");\r\n      }\r\n      board.push(arr);\r\n    }\r\n    return board;\r\n}\r\n\r\nexport const toggleValue = (val) => val === \"O\" ? \".\" : \"O\";\r\n\r\nexport const toggleNeigbours = (y, x, board, currentValue, newValue) => {\r\n\r\n    if(isRange(y - 1)){\r\n        toggleCurrentCell(y, x, board, currentValue, newValue)[y - 1][x] =\r\n        toggleValue(toggleCurrentCell(y, x, board, currentValue, newValue)[y - 1][x]);\r\n      }\r\n      if(isRange(y + 1)){\r\n        toggleCurrentCell(y, x, board, currentValue, newValue)[y + 1][x] =\r\n        toggleValue(toggleCurrentCell(y, x, board, currentValue, newValue)[y+1][x]);\r\n      }\r\n      if(isRange(x + 1)){\r\n        toggleCurrentCell(y, x, board, currentValue, newValue)[y][x + 1] =\r\n        toggleValue(toggleCurrentCell(y, x, board, currentValue, newValue)[y][x + 1]);\r\n      }\r\n      if(isRange(x - 1)){\r\n        toggleCurrentCell(y, x, board, currentValue, newValue)[y][x - 1] =\r\n        toggleValue(toggleCurrentCell(y, x, board, currentValue, newValue)[y][x - 1]);\r\n      }\r\n\r\n      return board;\r\n}","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport { createBoard, toggleValue, toggleNeigbours } from './Helper';\n\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5\n  }\n\n  constructor(props) {\n    super(props);\n    this.click = this.click.bind(this);\n    this.restart = this.restart.bind(this);\n\n    this.state = {\n      hasWon: false,\n      board: createBoard(this.props.nrows, this.props.ncols)\n    }\n  }\n\n  flipCellsAround(coord) {\n    let board = this.state.board;\n    let [y, x] = coord;\n\n    let currentValue = this.state.board[y][x];\n    let newValue = toggleValue(currentValue);\n\n    let newBoardVal = toggleNeigbours(y, x, board, currentValue, newValue);\n\n    let win = newBoardVal.flat().every(w => w === \".\");\n    this.setState({hasWon: win, board: newBoardVal});\n\n  }\n\n  click(evt){\n    let targetId = evt.target.id.split(\"\").map(Number);\n    this.flipCellsAround(targetId);\n  }\n\n  cellContent(c) {\n    return c === \"O\" ? true : c === \".\" ? false : null;\n  }\n\n  restart(){\n    //Easy board layout\n/*     [\n      [\".\", \".\", \".\", \".\", \".\"],\n      [\".\", \".\", \"O\", \".\", \".\"],\n      [\".\", \"O\", \"O\", \"O\", \".\"],\n      [\".\", \".\", \"O\", \".\", \".\"],\n      [\".\", \".\", \".\", \".\", \".\"]\n    ] */\n    this.setState({hasWon: false, board: createBoard(this.props.nrows, this.props.ncols)});\n  }\n\n  render() {\n\n    let newBoard = this.state.board.map((b, i) => (\n      <tr key={i}>\n        {b.map((c, j) => (\n          <Cell key={`${i}${j}`} pos={{x: i, y:j}} isLit={this.cellContent(c)} ev={this.click}/>\n        ))}\n      </tr>\n    ));\n    return(\n      <div className=\"Board\">\n        {this.state.hasWon ? <div className=\"Board-win\">\n          <p>You Won!</p>\n          <button onClick={this.restart}>Rematch</button>\n        </div> : <div className=\"Board-container\">\n          <div className=\"Board-neon-flux\">\n            <div className=\"Board-neon\">lights out</div>\n            <div className=\"Board-flux\"> game</div>\n          </div>\n          <table className=\"Board-table\">\n            <tbody>\n              {newBoard}\n            </tbody>\n          </table>\n        </div>}\n      </div>\n    )\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}